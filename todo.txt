
* you need a way to make the dump stop, like have the button latch so it only dumps once
* add RTS/CTS to serial ports

* can you somehow make it possible to reset remotely, or through a configured bit, so it's easier to reprogram?

Rtl:

  * can you/should you use the SB_DFFR block, D-type Flip Flop with Async Reset, to implement user-resettable flags for error and
    break and such, rather than auto-resetting it


Hardware:

  * I still haven't been able to write to the security page, or to otherwise make the metadata thing work.  It says it's programming
    it's but it then it reads back as FFs.  The programmer for the serial header doesn't support the security page, so I'll have to
    add it if I want to try to make that work.  Should probably get that sorted before I make another board

  * the DSACK and BERR signals can't really be satisfactorily handled by the transceivers.  They should probably be using an
    open collector, which might actually be ok to use a 3.3V chip with the 5V bus because it should only ever be connecting
    ground to the pin, and be high impedence otherwise... either way you should have a separate chip for that, and you could
    get rid of the extra HC245 transceiver
  * instead of using the invertor gate for the control signals, which didn't work, you could use it for the address and data
    output enables so that only one is ever turned on at the same time, since you had issues with the chips burning up due to
    a misconfiguration

  * what if the next iteration you add an arm microcontroller, either a SAMD or STM32

  * figure out what you need to do about the SPI disconnect to program the chip
  * should I wire up the WP and HOLD signals of the flash to FPGA pins?

  * what kind of ports, and easy extensions, should the board have?
    - it already have the primary USB interface
    - 6 pin Serial-to-USB interface (4 I/O)
    - buttons and LEDs for general use
    - headers that can be used for SPI, I2C, and others, for interfacing with offboard devices (2 I/O for I2C, 4 I/O for SPI)
    - type A USB for a USB Host? (an additional 2-3 I/O)
    - perhaps in a later revision, I can add Ethernet and SVGA/HDMI (although I think the chip isn't big enough for video gen)
    - later, could impl an fm synth in fpga with dac audio bitstream as output

