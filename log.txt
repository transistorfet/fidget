
2023-01-06:

- Should you use a 1K or 4K?  The 4K is only available from Mouser, but the 1K is at Digikey or Mouser
  It turns out Mouser has them on order, but not available, so they must be subject to shortages, so the 1K is a safer bet

- should you multiplex the address and data buses onboard?  So you'd have 4 x 16-bit bidirectional transceivers, 2 for
  each bus, and the low voltage side would be wired together and go to one set of 32 FPGA I/Os, and the EN and DIR pins
  for each bus would be wired to the FPGA so it can enable one or the other but not both?
- no I think if you want to do that, you need a latch for the address bus or else it can't actually make a transaction
  on the bus to program the flash chips onboard computie
- but for reading, you'd still need the address pins to be an input, meaning you'd need an extra set of transceivers...
- so it sounds like, either use 64 pins (out of 96 I/O pins), or 6 x 16bit chips, or just don't use it to program flash,
  or act as a bus sender, but instead just be a device and sniffer/analyzer
- just do a passive device for now, not a bus sender, so only 4 multiplexing chips
 
2023-01-08:

- I need to select some LDO regulators.  I definitely need a 1.2V and 3.3V, but I might need a 2.5V as well, or at least a zener
  diode like the Olimex board uses.  The 2.5V doesn't need to use a lot of current, and since digikey has a lot of the one that the
  TinyFPGA uses, the MIC5365, I think I'll just go with that.  The only concern is that it's in a very small package, SOT-323/SC-70
  but I think I might have soldered something like that before.  They don't have the same model in the SOT-23 package
- for the 3.3V regulator, I think I'll try something bigger, like 500mA.  I will also add a mosfet to either power from USB or from
  a separate source, but that will require an additional opamp I think...  at least the Arudino schematics use that
- I selected the AP2112K-3.3TRG1 from Diodes Inc as the 3.3V supply.  It has 600mA output and the specs seem pretty good, and price
  is low
- I decided to go with another MIC5365 for the 2.5V supply just because it's easy and should work, even though it's probably
  overkill for what the FPGA actually needs on that pin.  Better to be safe than sorry when I need to buy a new specific part
  anyways.

2023-01-10:

- I'm sort of thinking of adding the latches to allow the device to program flash in-circuit on the boards, or be a bus
  sender/requester.  I already need 6 transceivers for the bus signals =/  But it would make it a bit more versatile, and
  I don't have to add them
- I'm going to stick with what tinyfpga did with the SPI flash size and not using the cold boot option to store multiple configs
  because I want to make sure it's as compatible out of the box.  I can change things later once I have something working

2023-01-14:

- I added the oscillators, but I had to swap out the one that TinyFPGA uses because it wasn't available from digikey or mouser.
  I replaced it with a Kyocera KC2520Z16.0000C15XXK which was just the first digikey result that looked like I could hand solder
  it.  It seems to function exactly the same as the other one
- I kept the 16MHz oscillator because it's probably used by the usb bootloader, and I don't want to have to modify that to make
  this work
- I added a 3.6864MHz oscillator because that's what the serial chips on computie use, and I need an odd frequency tty-compatible
  oscillator for any kind of usart.  These two should be enough

2023-01-15:

- I had to switch out the 2.5V regulator for a MIC5317-2.5YM5 because the MIC5365 wasn't available.  It seems to be an identical
  part in every way except it can take up to 6V input instead of 5.5V as the limit.  The datasheet is also a Microchip one, instead
  of Micrel which I assume was bought out, so maybe this series is a newer one that will replace the older series.

- there is no suitable level shifting latch, but we already have level shifting on the address bus, so if the latch is connected to
  the shifted output of the transceiver, it should be ok.  The only problem might be the inputs to OE and LE for the latch, which
  would have to be level shifted from the FPGA I/O =/.  It's also a bit sketchy in that the latch is outputting onto the same bus
  it's getting data from, so the control of the latch has to *make sure* that the OE isn't active until LE is inactive or else they
  will conflict and possible damage the chip

2023-01-23:

- Now the MIC5365s are back in stock... I might switch back

- I've mostly been working on the RTL to make a simple usart device that I can get working on the TinyFPGA, which tests the bus
  interface.  It still needs a lot of work, but I think the basic idea has been proven
- I need to work on a debugger RTL that uses the USB device from the bootloader

- I have that working now.  I had the data directions wrong, so I was trying to use data_in to load the usart, but data_in is for
  data to go into the bus, and data_out is for the data coming from the bus that was written by the CPU.  Now it loads 0x30 into the
  usart when the address strobe signal is pulled low.  It's not great, but it at least proves the bus works and all that logic of
  the state machine for the bus is actually synthesized into the design instead of removed for being unused.  It's using 83 LCs out
  of what will be 1280 for the 1K.  That seems a bit tight, but until I can solder BGA, it's my only option

